install.packages('UniProt.ws')
install.packages('UniProt.ws')
install.packages('ROCR')
quality <- read.csv('quality.csv')
str(quality)
table(quality$PoorCare)
library(caTools)
set.seed(88)
split=sample.split(quality$PoorCare,SplitRatio = 0.75)
quality_train = subset(quality,split==TRUE)
quality_test = subset(quality,split==FALSE)
qualityLR <- glm(PoorCare ~ OfficeVisits+Narcotics,data=quality_train,family = binomial)
summary(qualityLR)
predictTrain <- predict(qualityLR,type = "response")
summary(predictTrain)
tapply(predictTrain,quality_train$PoorCare,mean)
q1LR <- glm(PoorCare ~ StartedOnCombination+ProviderCount,data=quality_train,family = binomial)
summary(q1LR)
q1Predict = predict(q1LR,type="response")
summary(q1Predict)
tapply(q1Predict,quality_train$PoorCare,mean)
table(quality_train$PoorCare,predictTrain > 0.5)
library(ROCR)
ROCRpred = prediction(predictTrain,quality_train$PoorCare)
setwd("C:/myRepo/R/Analytic Edge/Data")
quality <- read.csv('quality.csv')
str(quality)
table(quality$PoorCare)
library(caTools)
set.seed(88)
split=sample.split(quality$PoorCare,SplitRatio = 0.75)
quality_train = subset(quality,split==TRUE)
quality_test = subset(quality,split==FALSE)
qualityLR <- glm(PoorCare ~ OfficeVisits+Narcotics,data=quality_train,family = binomial)
summary(qualityLR)
predictTrain <- predict(qualityLR,type = "response")
summary(predictTrain)
tapply(predictTrain,quality_train$PoorCare,mean)
q1LR <- glm(PoorCare ~ StartedOnCombination+ProviderCount,data=quality_train,family = binomial)
summary(q1LR)
q1Predict = predict(q1LR,type="response")
summary(q1Predict)
tapply(q1Predict,quality_train$PoorCare,mean)
table(quality_train$PoorCare,predictTrain > 0.5)
library(ROCR)
ROCRpred = prediction(predictTrain,quality_train$PoorCare)
# Add colors
plot(ROCRperf, colorize=TRUE)
# Add threshold labels
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
# Add colors
plot(ROCRperf, colorize=TRUE)
# Add threshold labels
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
# Add colors
plot(ROCRperf, colorize=TRUE)
# Add threshold labels
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
# Performance function
ROCRperf = performance(ROCRpred, "tpr", "fpr")
# Add colors
plot(ROCRperf, colorize=TRUE)
# Add threshold labels
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
# Add colors
plot(ROCRperf, colorize=TRUE)
# Add threshold labels
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
predictTest = predict(qualityLR, type="response", newdata=quality_test)
ROCRpredTest = prediction(predictTest, qualityTest$PoorCare)
ROCRpredTest = prediction(predictTest, quality_test$PoorCare)
auc = as.numeric(performance(ROCRpredTest, "auc")@y.values)
auc
setwd("C:/myRepo/Machine Learning A-Z/Part 1 - Data Preprocessing")
