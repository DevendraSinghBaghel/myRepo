package com.icip.mvc;

import com.icip.core.service.ClimateUserService;
import com.icip.core.user.ICIPUser;
import com.icip.utils.Encipher;
import java.util.UUID;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.web.bind.annotation.RestController;


@RestController
@RequestMapping("/user")
public class userController
{
    
    @Autowired
    private ClimateUserService climateUserService;
    
    @Autowired
    private JavaMailSender mailSender;
    
    @RequestMapping(value="login", method = RequestMethod.POST)
    public ResponseEntity<?> login(HttpServletRequest request, HttpServletResponse response)
    {
        String email = request.getParameter("email");
        String password = request.getParameter("password");

        //ICIPUser u= ICIPUserHandler.searchICIPUser(email);
        
        ICIPUser u = this.climateUserService.findUserByName(email);
        if(u != null)
        { 
            if(Encipher.DecodePasswd(u.getPassword()).equals(password) && u.getStatus()==1)
            {
                u.setPassword("");
                return new ResponseEntity<ICIPUser>(u,HttpStatus.OK);
            }
            
        }
       

//        if(u!=null)
//        {
//            if(Encipher.DecodePasswd(u.getPassword()).equals(password) && u.getStatus()==1)
//            {
//                u.setPassword("");
//                return u;
//            }
//        }
//
//        return null;
        return new ResponseEntity<String>("BAD", HttpStatus.BAD_REQUEST);
    }
    
    @RequestMapping(value="resetPassword", method = RequestMethod.POST)
    public ResponseEntity<?> resetPassword(HttpServletRequest request, HttpServletResponse response){
       
        String email = request.getParameter("email");
        ICIPUser user = this.climateUserService.findUserByName(email);  
        if(user == null)
        { 
            new ResponseEntity<String>("User doesn't exist", HttpStatus.BAD_REQUEST);
        }
        UUID idOne = UUID.randomUUID();
        String emailPass = idOne.toString().substring(0,7);
        String newPass  = Encipher.EncodeString(emailPass);
        user.setPassword(newPass);    
        this.climateUserService.updateUserPassword(user);
        
        // send email
        SimpleMailMessage emailC = new SimpleMailMessage();
        emailC.setFrom("info@climateireland.ie");
        emailC.setTo(email);
        emailC.setSubject("Climate Ireland Password Reset");
        emailC.setText("New Password: " + emailPass);
         
        // sends the e-mail
        mailSender.send(emailC);
        
        
        return new ResponseEntity<ICIPUser>(user,HttpStatus.OK);
        
    }

    @RequestMapping(value="add", method = RequestMethod.POST)
    public ResponseEntity<?> add(HttpServletRequest request, HttpServletResponse response)
    {
        String email = request.getParameter("email");
        
        
       // ICIPUser u = this.climateUserService.findUserByName(email);  
        ICIPUser u = this.climateUserService.findByEmail(email);  
        if(u != null)
        { 
            new ResponseEntity<String>("User already exist", HttpStatus.BAD_REQUEST);
        }
        
        String password = request.getParameter("password");
        String firstName = request.getParameter("fname");
        String lastName = request.getParameter("lname");
        String sector = request.getParameter("sector");
        String organisation = request.getParameter("organisation");
        String reasons = request.getParameter("reasons");

        ICIPUser user = new ICIPUser(email,password,firstName,lastName,sector,organisation,reasons);
//        if(ICIPUserHandler.addICIPUser(user)==1)
//        {
//            return user;
//        }
        
        if(this.climateUserService.createUser(user).getUserID() > 0)
        {
            return new ResponseEntity<ICIPUser>(user,HttpStatus.OK);
        }
        
        return new ResponseEntity<String>("Registration has failed. Please try agian...", HttpStatus.BAD_REQUEST);
    }



}
