You can give a name to the elements of a vector with the names() function. Have a look at this example:

some_vector <- c("John Doe", "poker player")
names(some_vector) <- c("Name", "Profession")

select the first and the fifth day of the week: use the vector c(1, 5) between the square brackets. 
For example, the code below selects the first and fifth element of poker_vector:

poker_vector[c(1, 5)]

poker_vector[2:4]. Notice how the vector 2:4 is placed between the square brackets to select element 2 up to 4.

you can also use the element names to select multiple elements, for example:

poker_vector[c("Monday","Tuesday")]

by putting selection_vector between the square brackets that follow poker_vector:

poker_vector[selection_vector]

> c(4, 5, 6) > 5
[1] FALSE FALSE TRUE

Matrix
=======

In R, a matrix is a collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns. 
Since you are only working with rows and columns, a matrix is called two-dimensional.

You can construct a matrix in R with the matrix() function. Consider the following example:

matrix(1:9, byrow = TRUE, nrow = 3)

In the matrix() function:

The first argument is the collection of elements that R will arrange into the rows and columns of the matrix. Here, we use 1:9 which is a shortcut for c(1, 2, 3, 4, 5, 6, 7, 8, 9).
The argument byrow indicates that the matrix is filled by the rows. If we want the matrix to be filled by the columns, we just place byrow = FALSE.
The third argument nrow indicates that the matrix should have three rows.

Similar to vectors, you can add names for the rows and the columns of a matrix:

rownames(my_matrix) <- row_names_vector
colnames(my_matrix) <- col_names_vector

In R, the function rowSums() conveniently calculates the totals for each row of a matrix. 
This function creates a new vector:

rowSums(my_matrix)

colSums is used to claculate the values in columns , syntax same as rowSums

You can add a column or multiple columns to a matrix with the cbind() function, 
which merges matrices and/or vectors together by column. For example:

big_matrix <- cbind(matrix1, matrix2, vector1 ...)

rbind() - can be used add a row to matrix, syntax same as cbind()

Similar to vectors, you can use the square brackets [ ] to select one or multiple elements from a matrix. Whereas vectors have one dimension, matrices have two dimensions. You should therefore use a comma to separate that what to select from the rows from that what you want to select from the columns. For example:

my_matrix[1,2] selects the element at the first row and second column.
my_matrix[1:3,2:4] results in a matrix with the data on the rows 1, 2, 3 and columns 2, 3, 4.
If you want to select all elements of a row or a column, no number is needed before or after the comma, respectively:

my_matrix[,1] selects all elements of the first column.
my_matrix[1,] selects all elements of the first row.

you can do all arthmatic operations on matrix 
ex: my_matrix * 2, matrix1 * matrix2

Factors
=========

The term factor refers to a statistical data type used to store categorical variables. 
The difference between a categorical variable and a continuous variable is that a categorical variable can belong to a limited number of categories. 
A continuous variable, on the other hand, can correspond to an infinite number of values.

It is important that R knows whether it is dealing with a continuous or a categorical variable, 
as the statistical models you will develop in the future treat both types differently. (You will see later why this is the case.)

A good example of a categorical variable is the variable 'Gender'. A human individual can either be "Male" or "Female", 
making abstraction of inter-sexes. So here "Male" and "Female" are, in a simplified sense, the two values of the categorical variable "Gender", 
and every observation can be assigned to either the value "Male" of "Female".

To create factors in R, you make use of the function factor(). 
First thing that you have to do is create a vector that contains all the observations that belong to a limited number of categories. 
For example, gender_vector contains the sex of 5 different individuals:

gender_vector <- c("Male","Female","Female","Male","Male")
It is clear that there are two categories, or in R-terms 'factor levels', at work here: "Male" and "Female".

The function factor() will encode the vector as a factor:

factor_gender_vector <- factor(gender_vector)


There are two types of categorical variables: a nominal categorical variable and an ordinal categorical variable.

A nominal variable is a categorical variable without an implied order. 
This means that it is impossible to say that 'one is worth more than the other'. 
For example, think of the categorical variable animals_vector with the categories "Elephant", "Giraffe", "Donkey" and "Horse". 
Here, it is impossible to say that one stands above or below the other. (Note that some of you might disagree ;-) ).

In contrast, ordinal variables do have a natural ordering. 
Consider for example the categorical variable temperature_vector with the categories: "Low", "Medium" and "High". 
Here it is obvious that "Medium" stands above "Low", and "High" stands above "Medium"

factor_survey_vector
[1] Male   Female Female Male   Male  
Levels: Female Male

Level names can be altered by levels() 
levels(factors_vectors) <- c("name1","name2")

please mention in the level names in the correct order for R to map them correctly

summary() will give you a quick overview of the contents of a variable

 By default, the function factor() transforms speed_vector into an unordered factor. 
 To create an ordered factor, you have to add two additional arguments: ordered and levels.

factor(some_vector,
       ordered = TRUE,
       levels = c("lev1", "lev2" ...))
	   
DataFrames
===========

if matrix holds data for same type dataframes holds data of any type

the function head() enables you to show the first observations of a data frame. Similarly, 
the function tail() prints out the last observations in your data set.

str() shows you the structure of your data set. For a data frame it tells you:

The total number of observations (e.g. 32 car types)
The total number of variables (e.g. 11 car features)
A full list of the variables names (e.g. mpg, cyl ... )
The data type of each variable (e.g. num)
The first observations

You construct a data frame with the data.frame() function. As arguments, 
you pass the vectors from before: they will become the different columns of your data frame. 
Because every column has the same length, the vectors you pass should also have the same length. 
But don't forget that it is possible (and likely) that they contain different types of data.

Similar to vectors and matrices, you select elements from a data frame with the help of square brackets [ ]. 
By using a comma, you can indicate what to select from the rows and the columns respectively. For example:

my_df[1,2] selects the value at the first row and select element in my_df.
my_df[1:3,2:4] selects rows 1, 2, 3 and columns 2, 3, 4 in my_df.
Sometimes you want to select all elements of a row or column. For example, my_df[1, ]
selects all elements of the first row

> # Print out diameter of Mercury (row 1, column 3)
> planets_df[1,3]
[1] 0.382
> 
> # Print out data for Mars (entire fourth row)
> planets_df[4,]
  name               type diameter rotation rings
4 Mars Terrestrial planet    0.532     1.03 FALSE

Instead of using numerics to select elements of a data frame, you can also use the variable names to select columns of a data frame.

Suppose you want to select the first three elements of the type column. One way to do this is

planets_df[1:3,1]
A possible disadvantage of this approach is that you have to know (or look up) the column number of type, which gets hard if you have a lot of variables. It is often easier to just make use of the variable name:

planets_df[1:3,"type"]

you will often want to select an entire column, namely one specific variable from a data frame. 
If you want to select all elements of the variable diameter, for example, both of these will do the trick:

planets_df[,3]
planets_df[,"diameter"]
However, there is a short-cut. If your columns have names, you can use the $ sign:

planets_df$diameter

> planets_df[rings_vector, c("name","type","diameter","rotation","rings")]
     name      type diameter rotation rings
5 Jupiter Gas giant   11.209     0.41  TRUE
6  Saturn Gas giant    9.449     0.43  TRUE
7  Uranus Gas giant    4.007    -0.72  TRUE
8 Neptune Gas giant    3.883     0.67  TRUE

-subset() function as a short-cut to do exactly the same as what you did in the previous exercises.

subset(my_df, subset = some_condition)

subset(planets_df,subset=planets_df$diameter < 1)
     name               type diameter rotation rings
1 Mercury Terrestrial planet    0.382    58.64 FALSE
2   Venus Terrestrial planet    0.949  -243.02 FALSE
4    Mars Terrestrial planet    0.532     1.03 FALSE

>

order() is a function that gives you the ranked position of each element when it is applied on a variable, such as a vector for example:

> a <- c(100, 10, 1000)
> order(a)
[1] 2 1 3
10, which is the second element in a, is the smallest element, so 2 comes first in the output of order(a). 100, 
which is the first element in a is the second smallest element, so 1 comes second in the output of order(a).

This means we can use the output of order(a) to reshuffle a:

> a[order(a)]
[1]   10  100 1000 

List
=====

A list in R allows you to gather a variety of objects under one name (that is, the name of the list) in an ordered way. 
These objects can be matrices, vectors, data frames, even other lists, etc. 
It is not even required that these objects are related to each other in any way.

creating list

my_list <- list(comp1, comp2 ...)

-creating named list

my_list <- list(name1 = your_comp1, 
                name2 = your_comp2)
				
				or

my_list <- list(name1 = your_comp1, 
name2 = your_comp2)

various ways to select from the list

shining_list[[1]]

shining_list[["reviews"]]
shining_list$reviews

with shining_list[[2]][1] you select from the second component, actors (shining_list[[2]]), 
the first element ([1]). When you type this in the console, you will see the answer is Jack Nicholson.

add elements to list

ext_list <- c(my_list , my_val)

or

ext_list <- c(my_list, my_name = my_val)

Function in R
======================
func<- function(arg1,arg2){
 body
}